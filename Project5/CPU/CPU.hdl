// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Instruction format: ixxaccccccdddjjj
    // i=opcode
    // a= 0 (for A) and 1(for M)
    // cccccc= computation bits
    // ddd = destination bits d1(for A), d2(for D), d3(for M)
    // jjj = jump bits

    //Instruction decode
    // If i==0, A-type of instruction (@value)... then A=value
    // Else output of ALU is stored in A reg when asked
    Mux16(a=instruction, b=outputALU, sel=instruction[15], out=inRegA);

    // load to Reg A is 1 durind A-instruction and when we need to write result to A (d1==1) 
    Not(in=instruction[15], out=notOp);
    Or(a=notOp, b=instruction[5], out=loadRegA);
    ARegister(in=inRegA, load=loadRegA, out=RegA, out[0..14]=addressM);

    //This Mux selects whether ALU needs A or M for computation
    And(a=instruction[15], b=instruction[12], out=selectAorM);
    Mux16(a=RegA, b=inM, sel=selectAorM, out=AorM);

    // load to reg D is only when we need to write result to D (d2==1)
    And(a=instruction[15], b=instruction[4], out=loadRegD);
    DRegister(in=outputALU, load=loadRegD, out=RegD);

    // 11-6 instruction bits = control line to ALU
    ALU(x=RegD, y=AorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outputALU, out=outM, zr=zrOut, ng=ngOut);

    // write to M is only activated when we have C-instruction and d3==1
    And(a=instruction[3], b=instruction[15], out=writeM);

    //setting PC
    //Load logic
    //We need this only in C-type instruction
    //j1=instruction[2];
    //j2=instruction[1];
    //j3=instruction[0];
    //load = j1.ng + j2.zr + j3.(zr'.ng')

    And(a=instruction[15], b=instruction[2], out=j1);
    And(a=j1, b=ngOut, out=wire1);

    And(a=instruction[15], b=instruction[1], out=j2);
    And(a=j2, b=zrOut, out=wire2);

    Not(in=zrOut, out=notzr);
    Not(in=ngOut, out=notng);
    And(a=notzr, b=notng, out=positiveOut);
    And(a=instruction[15], b=instruction[0], out=j3);
    And(a=j3, b=positiveOut, out=wire3);

    Or(a=wire1, b=wire2, out=wire4);
    Or(a=wire3, b=wire4, out=jump);

    PC(in=RegA, load=jump, inc=true, reset=reset, out[0..14]=pc);
}